Index: bind-9.16.4/lib/isc/backtrace-emptytbl.c
===================================================================
--- bind-9.16.4.orig/lib/isc/backtrace-emptytbl.c
+++ bind-9.16.4/lib/isc/backtrace-emptytbl.c
@@ -21,7 +21,7 @@
 
 #include <isc/backtrace.h>
 
-LIBISC_EXTERNAL_DATA const int isc__backtrace_nsymbols = 0;
-LIBISC_EXTERNAL_DATA const isc_backtrace_symmap_t isc__backtrace_symtable[] = {
-	{ NULL, "" }
-};
+// LIBISC_EXTERNAL_DATA const int isc__backtrace_nsymbols = 0;
+// LIBISC_EXTERNAL_DATA const isc_backtrace_symmap_t isc__backtrace_symtable[] = {
+// 	{ NULL, "" }
+// };
Index: bind-9.16.4/bin/named/main.c
===================================================================
--- bind-9.16.4.orig/bin/named/main.c
+++ bind-9.16.4/bin/named/main.c
@@ -982,9 +982,9 @@ dump_symboltable(void) {
 	const char *fname;
 	const void *addr;
 
-	if (isc__backtrace_nsymbols == 0) {
-		return;
-	}
+	// if (isc__backtrace_nsymbols == 0) {
+	// 	return;
+	// }
 
 	if (!isc_log_wouldlog(named_g_lctx, ISC_LOG_DEBUG(99))) {
 		return;
Index: bind-9.16.4/lib/isc/backtrace.c
===================================================================
--- bind-9.16.4.orig/lib/isc/backtrace.c
+++ bind-9.16.4/lib/isc/backtrace.c
@@ -225,42 +225,42 @@ isc_backtrace_gettrace(void **addrs, int
 isc_result_t
 isc_backtrace_getsymbolfromindex(int idx, const void **addrp,
 				 const char **symbolp) {
-	REQUIRE(addrp != NULL && *addrp == NULL);
-	REQUIRE(symbolp != NULL && *symbolp == NULL);
+	// REQUIRE(addrp != NULL && *addrp == NULL);
+	// REQUIRE(symbolp != NULL && *symbolp == NULL);
+// 
+	// if (idx < 0 || idx >= isc__backtrace_nsymbols) {
+	// 	return (ISC_R_RANGE);
+	// }
 
-	if (idx < 0 || idx >= isc__backtrace_nsymbols) {
-		return (ISC_R_RANGE);
-	}
-
-	*addrp = isc__backtrace_symtable[idx].addr;
-	*symbolp = isc__backtrace_symtable[idx].symbol;
+	// *addrp = isc__backtrace_symtable[idx].addr;
+	// *symbolp = isc__backtrace_symtable[idx].symbol;
 	return (ISC_R_SUCCESS);
 }
 
 static int
 symtbl_compare(const void *addr, const void *entryarg) {
-	const isc_backtrace_symmap_t *entry = entryarg;
-	const isc_backtrace_symmap_t *end =
-		&isc__backtrace_symtable[isc__backtrace_nsymbols - 1];
-
-	if (isc__backtrace_nsymbols == 1 || entry == end) {
-		if (addr >= entry->addr) {
-			/*
-			 * If addr is equal to or larger than that of the last
-			 * entry of the table, we cannot be sure if this is
-			 * within a valid range so we consider it valid.
-			 */
-			return (0);
-		}
-		return (-1);
-	}
-
-	/* entry + 1 is a valid entry from now on. */
-	if (addr < entry->addr) {
-		return (-1);
-	} else if (addr >= (entry + 1)->addr) {
-		return (1);
-	}
+	// const isc_backtrace_symmap_t *entry = entryarg;
+	// const isc_backtrace_symmap_t *end =
+	// 	&isc__backtrace_symtable[isc__backtrace_nsymbols - 1];
+
+	// if (isc__backtrace_nsymbols == 1 || entry == end) {
+	// 	if (addr >= entry->addr) {
+	// 		/*
+	// 		 * If addr is equal to or larger than that of the last
+	// 		 * entry of the table, we cannot be sure if this is
+	// 		 * within a valid range so we consider it valid.
+	// 		 */
+	// 		return (0);
+	// 	}
+	// 	return (-1);
+	// }
+
+	// /* entry + 1 is a valid entry from now on. */
+	// if (addr < entry->addr) {
+	// 	return (-1);
+	// } else if (addr >= (entry + 1)->addr) {
+	// 	return (1);
+	// }
 	return (0);
 }
 
@@ -268,33 +268,33 @@ isc_result_t
 isc_backtrace_getsymbol(const void *addr, const char **symbolp,
 			unsigned long *offsetp) {
 	isc_result_t result = ISC_R_SUCCESS;
-	isc_backtrace_symmap_t *found;
+	// isc_backtrace_symmap_t *found;
 
-	/*
-	 * Validate the arguments: intentionally avoid using REQUIRE().
-	 * See notes in backtrace.h.
-	 */
-	if (symbolp == NULL || *symbolp != NULL || offsetp == NULL) {
-		return (ISC_R_FAILURE);
-	}
-
-	if (isc__backtrace_nsymbols < 1) {
-		return (ISC_R_NOTFOUND);
-	}
-
-	/*
-	 * Search the table for the entry that meets:
-	 * entry.addr <= addr < next_entry.addr.
-	 */
-	found = bsearch(addr, isc__backtrace_symtable, isc__backtrace_nsymbols,
-			sizeof(isc__backtrace_symtable[0]), symtbl_compare);
-	if (found == NULL) {
-		result = ISC_R_NOTFOUND;
-	} else {
-		*symbolp = found->symbol;
-		*offsetp = (unsigned long)((const char *)addr -
-					   (char *)found->addr);
-	}
+	// /*
+	//  * Validate the arguments: intentionally avoid using REQUIRE().
+	//  * See notes in backtrace.h.
+	//  */
+	// if (symbolp == NULL || *symbolp != NULL || offsetp == NULL) {
+	// 	return (ISC_R_FAILURE);
+	// }
+
+	// if (isc__backtrace_nsymbols < 1) {
+	// 	return (ISC_R_NOTFOUND);
+	// }
+
+	// /*
+	//  * Search the table for the entry that meets:
+	//  * entry.addr <= addr < next_entry.addr.
+	//  */
+	// found = bsearch(addr, isc__backtrace_symtable, isc__backtrace_nsymbols,
+	// 		sizeof(isc__backtrace_symtable[0]), symtbl_compare);
+	// if (found == NULL) {
+	// 	result = ISC_R_NOTFOUND;
+	// } else {
+	// 	*symbolp = found->symbol;
+	// 	*offsetp = (unsigned long)((const char *)addr -
+	// 				   (char *)found->addr);
+	// }
 
 	return (result);
-}
+}
\ No newline at end of file
Index: bind-9.16.4/lib/isc/include/isc/backtrace.h
===================================================================
--- bind-9.16.4.orig/lib/isc/include/isc/backtrace.h
+++ bind-9.16.4/lib/isc/include/isc/backtrace.h
@@ -47,9 +47,9 @@ struct isc_backtrace_symmap {
 	const char *symbol;
 };
 
-LIBISC_EXTERNAL_DATA extern const int isc__backtrace_nsymbols;
-LIBISC_EXTERNAL_DATA extern const isc_backtrace_symmap_t
-	isc__backtrace_symtable[];
+// LIBISC_EXTERNAL_DATA extern const int isc__backtrace_nsymbols;
+// LIBISC_EXTERNAL_DATA extern const isc_backtrace_symmap_t
+// 	isc__backtrace_symtable[];
 
 /***
  *** Functions
Index: bind-9.16.4/lib/isc/Makefile.in
===================================================================
--- bind-9.16.4.orig/lib/isc/Makefile.in
+++ bind-9.16.4/lib/isc/Makefile.in
@@ -64,7 +64,7 @@ OBJS =		pk11.@O@ pk11_result.@O@ \
 		string.@O@ symtab.@O@ task.@O@ taskpool.@O@ \
 		utf8.@O@ tm.@O@ timer.@O@ version.@O@ \
 		${UNIXOBJS} ${THREADOBJS}
-SYMTBLOBJS =	backtrace-emptytbl.@O@
+# SYMTBLOBJS =	backtrace-emptytbl.@O@
 
 # Alphabetically
 SRCS =		pk11.c pk11_result.c \
